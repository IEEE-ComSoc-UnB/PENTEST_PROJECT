import socket
import os
import sys
import configparser

# Define o caminho do arquivo de configuracao do sistema de arquivos
configFileSysPath = "/usr/lib/iot-server/config/snifferServerConfig"

class Server():

    # Define a cofig padrao do servidor
    def __init__(self):
        print("***INFO - Initializing server***")

        print("***INFO - Reading config file***")
        config = configparser.ConfigParser()
        config.read(configFileSysPath)

        self.host = config['SERVER']['host']
        self.port = int(config['SERVER']['port'])

    # Define a criacao do socket TCP
    def tcp(self):
        self.s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) # Usado para TCP
        self.sync_tcp()

    # Define a criacao do socket UDP
    def udp(self):
        self.s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)  # Usado para UDP

        try:
            self.s.bind((self.host,self.port))
        except socket.error:
            print("ERROR - Failed binding the socket, check if port is already in use.")
            sys.exit()

        date = os.popen("date").read()
        date = date.strip("\n")

        print("***SUCCESS - Server initialized***")
        print("{0} - Server on {1}:{2}".format(date,self.host,self.port))
        print("----- WAITING FOR PACKETS ------")

        self.conn_udp()


    # Faz com que o socket escute de maneira sincrona
    def sync_tcp(self):

        try:
            self.s.bind((self.host,self.port))
        except socket.error:
            print("ERROR - Failed binding the socket, check if port is already in use.")
            sys.exit()

        self.s.listen(5)

        date = os.popen("date").read()
        date = date.strip("\n")

        print("***SUCCESS - Server initialized***")
        print("{0} - Server on {1}:{2}".format(date,self.host,self.port))
        print("----- WAITING FOR CONNECTIONS -----")

        while True:
            Server.conn_tcp(self)

    # Define a conexao TCP
    def conn_tcp(self):

        packt = self.s.accept()
        if packt is not None:
            conn, addr = packt

            date = os.popen("date").read()
            date = date.strip("\n")
            print("{0} - Connection estabilished with {1}:{2}".format(date,addr[0],addr[1]))

            while True:
                data = conn.recv(1024)

                if not data:
                    break
                else:
                    date = os.popen("date").read()
                    date = date.strip("\n")
                    print("{0} - Data: {1}".format(date,data))

    # Define a conexao UDP
    def conn_udp(self):

        logDateMajor = os.popen("date +%x").read()
        logDateMajor = logDateMajor.strip("\n")

        while True:

            logDateMinor = os.popen("date +%x").read()
            logDateMinor = logDateMinor.strip("\n")

            if logDateMajor == logDateMinor:

                print("Ainda Ã© o mesmo dia")
                with open('/var/log/iot-server/{0}.log'.format(logDateMajor),'a') as  file:
                    data, addr = self.s.recvfrom(1024)
                    date = os.popen("date").read()
                    date = date.strip("\n")
                    #print("{0} - INFO - Packets received from {1}:{2}".format(date,addr[0],addr[1]))
                    #print("{0} - INFO - Packet Data: {1}".format(date,data))
                    file.write("{0} - INFO - Packets received from {1}:{2}".format(date, addr[0], addr[1]))
                    file.write("{0} - INFO - Packet Data {1}".format(date, data))

            elif logDateMajor != logDateMinor:
                logDateMajor = logDateMinor

                print("Dias diferentes")
                with open('/var/log/iot-server/{0}.log'.format(logDateMajor),'a') as file:
                    data, addr = self.s.recvfrom(1024)
                    date = os.popen("date").read()
                    date = date.strip("\n")
                    #print("{0} - INFO - Packets received from {1}:{2}".format(date, addr[0], addr[1]))
                    #print("{0} - INFO - Packet Data: {1}".format(date, data))
                    file.write("{0} - INFO - Packets received from {1}:{2}".format(date,addr[0],addr[1]))
                    file.write("{0} - INFO - Packet Data {1}".format(date,data))



#Server.tcp(Server())
#Server.udp(Server())

