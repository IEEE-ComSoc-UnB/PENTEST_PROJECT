import configparser
import sys

# Define o caminho do arquivo de configuração do sistema de arquivos
configFileSysPath = "/mnt/c/Users/danie/Documents/ComSoc_GIT/PENTEST_PROJECT/IOT/Virtual/Sec_iot/config/snifferServerConfig"

def main():
    configArray=[]

    # Pede as informaçoes: host, porta, e keys (Coloca valores default se nenhum deles existir)
    addr = input("Server Sniffer Configuration File.\nServer IPv4 address [DEFAULT: 127.0.0.1]): ")

    if str(addr) == "":
        configArray.append("127.0.0.1")
    else:
        configArray.append(addr)

    port = input("Server port [DEFAULT: 6789]: ")

    if str(port) == "":
        configArray.append("6789")
    else:
        configArray.append(port)

    keysPath = input("Path to server cryptography keys [DEFAULT: NONE]: ")

    configArray.append(getDevices())

    if str(keysPath) == "":
        configArray.append("NONE")
        config_default(configArray)
    else:
        configArray.append(keysPath)
        config_default(configArray)


def getDevices():

    stop = "no"
    devices = []
    i = 1

    while stop == "no":
        deviceAddr = input("Device {0} address [NO to exit]: ".format(i))

        if deviceAddr == "NO":
            break

        elif deviceAddr == "":

            while deviceAddr == "":
                print("ERR - Invalid address")
                deviceAddr = input("Device {0} address [NO to exit]: ".format(i))

                if deviceAddr == "NO":
                    sys.exit()

            devices.append(deviceAddr)

        else:
            devices.append(deviceAddr)

        i += 1

    return devices


def transformArray(devices):

    i = 0
    stra = " "
    while i <= len(devices)-1:
        stra = str(devices[i])+","


def config_default(config): 

    if config[2] == "NONE":
        config.remove("NONE")

        host = config[0]
        port = config[1]

    else:
        host = config[0]
        port = config[1]
        keys = config[2]

    # Se não tiver keys configuradas
    if len(config) < 3:
        config = configparser.ConfigParser()
        config['SERVER'] = {'Host': host,'Port': port}

    # Se tiver keys configuradas
    else:
        config = configparser.ConfigParser()
        config['SERVER'] = {'Host': host,'Port': port,'Keys': keys}

    with open(configFileSysPath,'w') as configFile:
        config.write(configFile)

main()